package {{configPackage}};

{{#joda}}
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
{{/joda}}
import org.springframework.context.annotation.Configuration;
import org.springframework.cloud.netflix.feign.EnableFeignClients;

import java.io.IOException;
import java.text.SimpleDateFormat;

{{#vendorExtensions}}{{#x-appId}}//appId:{{x-appId}}{{/x-appId}}{{/vendorExtensions}}
@Configuration
@EnableFeignClients(basePackages = { "{{basePackage}}", "{{apiPackage}}" })
public class ClientConfiguration {

{{#authMethods}}
    {{#isBasic}}
  @Value("${ {{{title}}}.security.{{{name}}}.username:}")
  private String {{{name}}}Username;

  @Value("${ {{{title}}}.security.{{{name}}}.password:}")
  private String {{{name}}}Password;

  @Bean
  @ConditionalOnProperty(name = "{{{title}}}.security.{{{name}}}.username")
  public BasicAuthRequestInterceptor {{{name}}}RequestInterceptor() {
    return new BasicAuthRequestInterceptor(this.{{{name}}}Username, this.{{{name}}}Password);
  }

    {{/isBasic}}
    {{#isApiKey}}
  @Value("${ {{{title}}}.security.{{{name}}}.key:}")
  private String {{{name}}}Key;

  @Bean
  @ConditionalOnProperty(name = "{{{title}}}.security.{{{name}}}.key")
  public ApiKeyRequestInterceptor {{{name}}}RequestInterceptor() {
    return new ApiKeyRequestInterceptor({{#isKeyInHeader}}"header"{{/isKeyInHeader}}{{^isKeyInHeader}}"query"{{/isKeyInHeader}}, "{{{keyParamName}}}", this.{{{name}}}Key);
  }

    {{/isApiKey}}
    {{#isOAuth}}
  @Bean
  @ConditionalOnProperty("{{{title}}}.security.{{{name}}}.client-id")
  public OAuth2FeignRequestInterceptor {{{name}}}RequestInterceptor() {
    return new OAuth2FeignRequestInterceptor(new DefaultOAuth2ClientContext(), {{{name}}}ResourceDetails());
  }

        {{#isCode}}
  @Bean
  @ConditionalOnProperty("{{{title}}}.security.{{{name}}}.client-id")
  @ConfigurationProperties("{{{title}}}.security.{{{name}}}")
  public AuthorizationCodeResourceDetails {{{name}}}ResourceDetails() {
    AuthorizationCodeResourceDetails details = new AuthorizationCodeResourceDetails();
    details.setAccessTokenUri("{{{tokenUrl}}}");
    details.setUserAuthorizationUri("{{{authorizationUrl}}}");
    return details;
  }

        {{/isCode}}
        {{#isPassword}}
  @Bean
  @ConditionalOnProperty("{{{title}}}.security.{{{name}}}.client-id")
  @ConfigurationProperties("{{{title}}}.security.{{{name}}}")
  public ResourceOwnerPasswordResourceDetails {{{name}}}ResourceDetails() {
    ResourceOwnerPasswordResourceDetails details = new ResourceOwnerPasswordResourceDetails();
    details.setAccessTokenUri("{{{tokenUrl}}}");
    return details;
  }

        {{/isPassword}}
        {{#isApplication}}
  @Bean
  @ConditionalOnProperty("{{{title}}}.security.{{{name}}}.client-id")
  @ConfigurationProperties("{{{title}}}.security.{{{name}}}")
  public ClientCredentialsResourceDetails {{{name}}}ResourceDetails() {
    ClientCredentialsResourceDetails details = new ClientCredentialsResourceDetails();
    details.setAccessTokenUri("{{{tokenUrl}}}");
    return details;
  }

        {{/isApplication}}
        {{#isImplicit}}
  @Bean
  @ConditionalOnProperty("{{{title}}}.security.{{{name}}}.client-id")
  @ConfigurationProperties("{{{title}}}.security.{{{name}}}")
  public ImplicitResourceDetails {{{name}}}ResourceDetails() {
    ImplicitResourceDetails details = new ImplicitResourceDetails();
    details.setUserAuthorizationUri("{{{authorizationUrl}}}");
    return details;
  }

        {{/isImplicit}}
    {{/isOAuth}}
{{/authMethods}}

}